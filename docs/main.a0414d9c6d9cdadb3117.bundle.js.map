{"version":3,"file":"main.a0414d9c6d9cdadb3117.bundle.js","sources":["webpack:///./src/components/core/AppWrapper.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport { Router } from 'react-router-dom';\r\nimport { History, Path, LocationState, LocationDescriptorObject, createPath } from 'history';\r\nimport { useFusionContext, combineUrls, HistoryContext } from '@equinor/fusion';\r\nimport { Spinner, ErrorMessage, ErrorBoundary } from '@equinor/fusion-components';\r\n\r\nconst hasBasename = (path: string, prefix: string) => {\r\n    return new RegExp('^' + prefix + '(\\\\/|\\\\?|#|$)', 'i').test(path);\r\n};\r\n\r\nconst stripBasename = (path: string, prefix: string) => {\r\n    return hasBasename(path, prefix) ? path.substr(prefix.length) : path;\r\n};\r\n\r\nconst createAppHistory = (history: History, appKey?: string): History => {\r\n    const basename = combineUrls('/apps', appKey || '');\r\n\r\n    const ensurePathBaseName = (path: Path | LocationDescriptorObject<LocationState>) => {\r\n        if (typeof path === 'string') {\r\n            return combineUrls(basename, path.toString());\r\n        }\r\n\r\n        const location = path as LocationDescriptorObject<LocationState>;\r\n        return combineUrls(basename, createPath(location));\r\n    };\r\n\r\n    return {\r\n        ...history,\r\n        location: {\r\n            ...history.location,\r\n            pathname: stripBasename(history.location.pathname, basename),\r\n        },\r\n        createHref: location => basename + history.createHref(location),\r\n        push: (path: Path | LocationDescriptorObject<LocationState>, state?: LocationState) => {\r\n            history.push(ensurePathBaseName(path), state);\r\n        },\r\n        replace: (path: Path | LocationDescriptorObject<LocationState>, state?: LocationState) =>\r\n            history.replace(ensurePathBaseName(path), state),\r\n        listen: func =>\r\n            history.listen((location, action) => {\r\n                func(\r\n                    {\r\n                        ...location,\r\n                        pathname: stripBasename(location.pathname, basename),\r\n                    },\r\n                    action\r\n                );\r\n            }),\r\n    };\r\n};\r\n\r\ntype AppWrapperProps = {\r\n    appKey?: string;\r\n};\r\n\r\nconst AppWrapper: React.FC<AppWrapperProps> = ({ appKey }) => {\r\n    const {\r\n        app: { container: appContainer },\r\n        history,\r\n    } = useFusionContext();\r\n    const [isFetching, setIsFetching] = useState(false);\r\n\r\n    const currentApp = appContainer.currentApp;\r\n\r\n    const setCurrentApp = async () => {\r\n        setIsFetching(true);\r\n        await appContainer.setCurrentAppAsync(appKey || null);\r\n        setIsFetching(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setCurrentApp();\r\n        return () => {\r\n            appContainer.setCurrentAppAsync(null);\r\n        };\r\n    }, [appKey]);\r\n\r\n    const [, forceUpdate] = useState();\r\n    useEffect(() => {\r\n        // If the app has been registered between rendering the app and useEffect\r\n        if (appKey && !currentApp && appContainer.get(appKey)) {\r\n            forceUpdate(null);\r\n        }\r\n\r\n        return appContainer.on('update', app => {\r\n            if (app.key === appKey) {\r\n                forceUpdate(null);\r\n            }\r\n        });\r\n    }, [appKey]);\r\n\r\n    const appHistory = useMemo(() => createAppHistory(history, appKey), [appKey, history, history.location]);\r\n\r\n    if (currentApp === null && isFetching) {\r\n        return <Spinner centered floating />;\r\n    }\r\n\r\n    if (!currentApp) {\r\n        return (\r\n            <ErrorMessage\r\n                hasError\r\n                errorType=\"notFound\"\r\n                title=\"Unable to find the selected app\"\r\n                message=\"\"\r\n            />\r\n        );\r\n    }\r\n\r\n    const AppComponent = currentApp.AppComponent;\r\n    if (!AppComponent) {\r\n        return (\r\n            <ErrorMessage\r\n                hasError\r\n                errorType=\"error\"\r\n                title=\"There seems to be something wrong with this app\"\r\n                message=\"\"\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <HistoryContext.Provider value={{ history: appHistory }}>\r\n                <Router history={appHistory}>\r\n                    <AppComponent />\r\n                </Router>\r\n            </HistoryContext.Provider>\r\n        </ErrorBoundary>\r\n    );\r\n};\r\n\r\nexport default AppWrapper;\r\n"],"mappings":"AAmIA","sourceRoot":""}