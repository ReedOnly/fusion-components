{"version":3,"file":"main.ea6bbd5c7fd1d22a2d01.bundle.js","sources":["webpack:///./src/components/core/ContextSelector/index.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n    ContextTypes,\r\n    useContextManager,\r\n    useCurrentContext,\r\n    Context,\r\n    useComponentDisplayType,\r\n    ComponentDisplayType,\r\n} from '@equinor/fusion';\r\nimport useContextSearchResults from './useContextSearchResults';\r\nimport classNames from 'classnames';\r\nimport styles from './styles.less';\r\nimport SearchIcon from '../../icons/components/search';\r\nimport { Spinner } from 'index';\r\n\r\ntype ContextSelectorProps = {\r\n    types: ContextTypes[];\r\n};\r\n\r\nconst ContextSelector: React.FC<ContextSelectorProps> = ({ types }: ContextSelectorProps) => {\r\n    const [shouldShowResultsDropdown, setShouldShowResultsDropdown] = React.useState(false);\r\n    const [queryText, setQueryText] = React.useState('');\r\n    const [relatedContexts, setRelatedContexts] = React.useState<Context[]>([]);\r\n    const [isFetchingRelatedContexts, setIsFetchingRelatedContexts] = React.useState(false);\r\n    const [inputRef, setInputRef] = React.useState<HTMLElement | null>(null);\r\n    const contextManager = useContextManager();\r\n    const currentContext = useCurrentContext();\r\n    const currentContextForType = useCurrentContext(...types);\r\n\r\n    const exchangeCurrentContext = async () => {\r\n        setIsFetchingRelatedContexts(true);\r\n\r\n        try {\r\n            const possibleContexts = await contextManager.exchangeCurrentContextAsync(...types);\r\n            const linkedContext = currentContext\r\n                ? await contextManager.getLinkedContextAsync(currentContext)\r\n                : null;\r\n\r\n            setIsFetchingRelatedContexts(false);\r\n\r\n            if (possibleContexts.length === 1) {\r\n                return contextManager.setCurrentContextAsync(possibleContexts[0]);\r\n            }\r\n\r\n            const linkedContextIsRelevant =\r\n                linkedContext &&\r\n                types.find(type => linkedContext.type.id === type) &&\r\n                possibleContexts.find(c => c.id === linkedContext.id);\r\n            if (linkedContext && linkedContextIsRelevant) {\r\n                return contextManager.setCurrentContextAsync(linkedContext);\r\n            }\r\n\r\n            if (!possibleContexts.length) {\r\n                return;\r\n            }\r\n\r\n            // Try to resolve a related context from the history\r\n            const history = await contextManager.getAsync('history');\r\n            if (history !== null && history.length > 0) {\r\n                const fromHistory = history.filter(\r\n                    c => c && possibleContexts.find(pc => pc.id === c.id)\r\n                );\r\n\r\n                if (fromHistory.length === 1) {\r\n                    return contextManager.setCurrentContextAsync(fromHistory[0]);\r\n                }\r\n            }\r\n\r\n            setRelatedContexts(possibleContexts);\r\n        } catch {\r\n            setIsFetchingRelatedContexts(false);\r\n        }\r\n\r\n        if (inputRef) {\r\n            inputRef.focus();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (currentContext && !types.find(type => currentContext.type.id === type)) {\r\n            exchangeCurrentContext();\r\n        }\r\n    }, [currentContext, types]);\r\n\r\n    const setCurrentContextAsync = async (context?: Context) => {\r\n        if (context) {\r\n            await contextManager.setCurrentContextAsync(context);\r\n            setQueryText('');\r\n            setRelatedContexts([]);\r\n            setShouldShowResultsDropdown(false);\r\n        }\r\n    };\r\n\r\n    const onSearchChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setQueryText(e.target.value);\r\n    }, []);\r\n\r\n    const onOpen = React.useCallback(() => setShouldShowResultsDropdown(true), []);\r\n    const onClose = React.useCallback(() => {\r\n        setShouldShowResultsDropdown(false);\r\n        setQueryText('');\r\n    }, []);\r\n\r\n    const onKeyUp = React.useCallback((e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.keyCode === 27) {\r\n            // ESC\r\n            onClose();\r\n        }\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (shouldShowResultsDropdown && inputRef) {\r\n            inputRef.focus();\r\n        }\r\n    }, [shouldShowResultsDropdown, inputRef]);\r\n\r\n    const containerRef = React.useRef<HTMLDivElement>(null);\r\n\r\n    const isQuerying = useContextSearchResults(\r\n        inputRef,\r\n        containerRef,\r\n        types,\r\n        relatedContexts,\r\n        setCurrentContextAsync,\r\n        queryText,\r\n        shouldShowResultsDropdown,\r\n        onClose\r\n    );\r\n\r\n    const inputClassNames = classNames(styles.searchInput, {\r\n        [styles.focus]: shouldShowResultsDropdown,\r\n    });\r\n\r\n    const getButtonContent = () => {\r\n        if (currentContextForType) {\r\n            return currentContextForType.title;\r\n        }\r\n\r\n        if (isFetchingRelatedContexts) {\r\n            return (\r\n                <span>\r\n                    Resolving {currentContext ? currentContext.title : null} <Spinner inline />\r\n                </span>\r\n            );\r\n        }\r\n\r\n        if (currentContext && !isFetchingRelatedContexts) {\r\n            return `Unable to resolve ${currentContext.title}. Please select context`;\r\n        }\r\n\r\n        return 'Select context';\r\n    };\r\n\r\n    const componentDisplayType = useComponentDisplayType();\r\n    const containerClassNames = classNames(styles.container, {\r\n        [styles.comfortable]: componentDisplayType === ComponentDisplayType.Comfortable,\r\n        [styles.compact]: componentDisplayType === ComponentDisplayType.Compact,\r\n    });\r\n\r\n    return (\r\n        <div ref={containerRef} onClick={onOpen} className={containerClassNames}>\r\n            <SearchIcon color=\"#DADADA\" />\r\n            {shouldShowResultsDropdown ? (\r\n                <>\r\n                    <input\r\n                        ref={setInputRef}\r\n                        type=\"text\"\r\n                        value={queryText}\r\n                        onChange={onSearchChange}\r\n                        onKeyUp={onKeyUp}\r\n                        placeholder={'Search'}\r\n                        className={inputClassNames}\r\n                    />\r\n                    {isQuerying && <Spinner inline />}\r\n                </>\r\n            ) : (\r\n                <button className={styles.contextButton}>{getButtonContent()}</button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContextSelector;\r\n"],"mappings":"AAsLA","sourceRoot":""}